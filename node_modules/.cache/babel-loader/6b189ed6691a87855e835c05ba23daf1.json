{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\n\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\n\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n\n  return to;\n};\n\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = value => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n\n    var rejected = value => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n\n    var step = x => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n}; // src/index.tsx\n\n\nvar src_exports = {};\n\n__export(src_exports, {\n  SessionContextProvider: () => SessionContextProvider,\n  useSession: () => useSession,\n  useSessionContext: () => useSessionContext,\n  useSupabaseClient: () => useSupabaseClient,\n  useUser: () => useUser\n});\n\nmodule.exports = __toCommonJS(src_exports); // src/components/SessionContext.tsx\n\nvar import_react = require(\"react\");\n\nvar import_jsx_runtime = require(\"react/jsx-runtime\");\n\nvar SessionContext = (0, import_react.createContext)({\n  isLoading: true,\n  session: null,\n  error: null,\n  supabaseClient: {}\n});\n\nvar SessionContextProvider = _ref => {\n  let {\n    supabaseClient,\n    initialSession = null,\n    children\n  } = _ref;\n  const [session, setSession] = (0, import_react.useState)(initialSession);\n  const [isLoading, setIsLoading] = (0, import_react.useState)(!initialSession);\n  const [error, setError] = (0, import_react.useState)();\n  (0, import_react.useEffect)(() => {\n    if (!session && initialSession) {\n      setSession(initialSession);\n    }\n  }, [session, initialSession]);\n  (0, import_react.useEffect)(() => {\n    let mounted = true;\n\n    function getSession() {\n      return __async(this, null, function* () {\n        const {\n          data: {\n            session: session2\n          },\n          error: error2\n        } = yield supabaseClient.auth.getSession();\n\n        if (mounted) {\n          if (error2) {\n            setError(error2);\n            setIsLoading(false);\n            return;\n          }\n\n          setSession(session2);\n          setIsLoading(false);\n        }\n      });\n    }\n\n    getSession();\n    return () => {\n      mounted = false;\n    };\n  }, []);\n  (0, import_react.useEffect)(() => {\n    const {\n      data: {\n        subscription\n      }\n    } = supabaseClient.auth.onAuthStateChange((event, session2) => {\n      if (session2 && (event === \"SIGNED_IN\" || event === \"TOKEN_REFRESHED\" || event === \"USER_UPDATED\")) {\n        setSession(session2);\n      }\n\n      if (event === \"SIGNED_OUT\") {\n        setSession(null);\n      }\n    });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, []);\n  const value = (0, import_react.useMemo)(() => {\n    if (isLoading) {\n      return {\n        isLoading: true,\n        session: null,\n        error: null,\n        supabaseClient\n      };\n    }\n\n    if (error) {\n      return {\n        isLoading: false,\n        session: null,\n        error,\n        supabaseClient\n      };\n    }\n\n    return {\n      isLoading: false,\n      session,\n      error: null,\n      supabaseClient\n    };\n  }, [isLoading, session, error]);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(SessionContext.Provider, {\n    value,\n    children\n  });\n};\n\nvar useSessionContext = () => {\n  const context = (0, import_react.useContext)(SessionContext);\n\n  if (context === void 0) {\n    throw new Error(`useSessionContext must be used within a SessionContextProvider.`);\n  }\n\n  return context;\n};\n\nfunction useSupabaseClient() {\n  const context = (0, import_react.useContext)(SessionContext);\n\n  if (context === void 0) {\n    throw new Error(`useSupabaseClient must be used within a SessionContextProvider.`);\n  }\n\n  return context.supabaseClient;\n}\n\nvar useSession = () => {\n  const context = (0, import_react.useContext)(SessionContext);\n\n  if (context === void 0) {\n    throw new Error(`useSession must be used within a SessionContextProvider.`);\n  }\n\n  return context.session;\n};\n\nvar useUser = () => {\n  var _a, _b;\n\n  const context = (0, import_react.useContext)(SessionContext);\n\n  if (context === void 0) {\n    throw new Error(`useUser must be used within a SessionContextProvider.`);\n  }\n\n  return (_b = (_a = context.session) == null ? void 0 : _a.user) != null ? _b : null;\n}; // Annotate the CommonJS export names for ESM import in node:\n\n\n0 && (module.exports = {\n  SessionContextProvider,\n  useSession,\n  useSessionContext,\n  useSupabaseClient,\n  useUser\n});","map":{"version":3,"mappings":"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","names":["__export","SessionContextProvider","useSession","useSessionContext","useSupabaseClient","useUser","module","require","SessionContext","import_react","isLoading","session","error","supabaseClient","initialSession","children","setSession","setIsLoading","setError","mounted","getSession","data","auth","subscription","onAuthStateChange","event","unsubscribe","value","Provider","context","Error","_b","user"],"sources":["C:\\Users\\PADIDAM\\Downloads\\TaskManagerShare-main\\TaskManagerShare-main\\frontend\\task-manager\\node_modules\\@supabase\\auth-helpers-react\\src\\index.tsx","C:\\Users\\PADIDAM\\Downloads\\TaskManagerShare-main\\TaskManagerShare-main\\frontend\\task-manager\\node_modules\\@supabase\\auth-helpers-react\\src\\components\\SessionContext.tsx"],"sourcesContent":["// Types\nexport type { Session, User, SupabaseClient } from '@supabase/supabase-js';\n\n// Methods & Components\nexport * from './components/SessionContext';\n","import { AuthError, Session, SupabaseClient } from '@supabase/supabase-js';\nimport React, {\n\tcreateContext,\n\tPropsWithChildren,\n\tuseContext,\n\tuseEffect,\n\tuseMemo,\n\tuseState\n} from 'react';\n\nexport type SessionContext =\n\t| {\n\t\t\tisLoading: true;\n\t\t\tsession: null;\n\t\t\terror: null;\n\t\t\tsupabaseClient: SupabaseClient;\n\t  }\n\t| {\n\t\t\tisLoading: false;\n\t\t\tsession: Session;\n\t\t\terror: null;\n\t\t\tsupabaseClient: SupabaseClient;\n\t  }\n\t| {\n\t\t\tisLoading: false;\n\t\t\tsession: null;\n\t\t\terror: AuthError;\n\t\t\tsupabaseClient: SupabaseClient;\n\t  }\n\t| {\n\t\t\tisLoading: false;\n\t\t\tsession: null;\n\t\t\terror: null;\n\t\t\tsupabaseClient: SupabaseClient;\n\t  };\n\nconst SessionContext = createContext<SessionContext>({\n\tisLoading: true,\n\tsession: null,\n\terror: null,\n\tsupabaseClient: {} as any\n});\n\nexport interface SessionContextProviderProps {\n\tsupabaseClient: SupabaseClient;\n\tinitialSession?: Session | null;\n}\n\nexport const SessionContextProvider = ({\n\tsupabaseClient,\n\tinitialSession = null,\n\tchildren\n}: PropsWithChildren<SessionContextProviderProps>) => {\n\tconst [session, setSession] = useState<Session | null>(initialSession);\n\tconst [isLoading, setIsLoading] = useState<boolean>(!initialSession);\n\tconst [error, setError] = useState<AuthError>();\n\n\tuseEffect(() => {\n\t\tif (!session && initialSession) {\n\t\t\tsetSession(initialSession);\n\t\t}\n\t}, [session, initialSession]);\n\n\tuseEffect(() => {\n\t\tlet mounted = true;\n\n\t\tasync function getSession() {\n\t\t\tconst {\n\t\t\t\tdata: { session },\n\t\t\t\terror\n\t\t\t} = await supabaseClient.auth.getSession();\n\n\t\t\t// only update the react state if the component is still mounted\n\t\t\tif (mounted) {\n\t\t\t\tif (error) {\n\t\t\t\t\tsetError(error);\n\t\t\t\t\tsetIsLoading(false);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tsetSession(session);\n\t\t\t\tsetIsLoading(false);\n\t\t\t}\n\t\t}\n\n\t\tgetSession();\n\n\t\treturn () => {\n\t\t\tmounted = false;\n\t\t};\n\t}, []);\n\n\tuseEffect(() => {\n\t\tconst {\n\t\t\tdata: { subscription }\n\t\t} = supabaseClient.auth.onAuthStateChange((event, session) => {\n\t\t\tif (session && (event === 'SIGNED_IN' || event === 'TOKEN_REFRESHED' || event === 'USER_UPDATED')) {\n\t\t\t\tsetSession(session);\n\t\t\t}\n\n\t\t\tif (event === 'SIGNED_OUT') {\n\t\t\t\tsetSession(null);\n\t\t\t}\n\t\t});\n\n\t\treturn () => {\n\t\t\tsubscription.unsubscribe();\n\t\t};\n\t}, []);\n\n\tconst value: SessionContext = useMemo(() => {\n\t\tif (isLoading) {\n\t\t\treturn {\n\t\t\t\tisLoading: true,\n\t\t\t\tsession: null,\n\t\t\t\terror: null,\n\t\t\t\tsupabaseClient\n\t\t\t};\n\t\t}\n\n\t\tif (error) {\n\t\t\treturn {\n\t\t\t\tisLoading: false,\n\t\t\t\tsession: null,\n\t\t\t\terror,\n\t\t\t\tsupabaseClient\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\tisLoading: false,\n\t\t\tsession,\n\t\t\terror: null,\n\t\t\tsupabaseClient\n\t\t};\n\t}, [isLoading, session, error]);\n\n\treturn <SessionContext.Provider value={value}>{children}</SessionContext.Provider>;\n};\n\nexport const useSessionContext = () => {\n\tconst context = useContext(SessionContext);\n\tif (context === undefined) {\n\t\tthrow new Error(`useSessionContext must be used within a SessionContextProvider.`);\n\t}\n\n\treturn context;\n};\n\nexport function useSupabaseClient<\n\tDatabase = any,\n\tSchemaName extends string & keyof Database = 'public' extends keyof Database\n\t\t? 'public'\n\t\t: string & keyof Database\n>() {\n\tconst context = useContext(SessionContext);\n\tif (context === undefined) {\n\t\tthrow new Error(`useSupabaseClient must be used within a SessionContextProvider.`);\n\t}\n\n\treturn context.supabaseClient as SupabaseClient<Database, SchemaName>;\n}\n\nexport const useSession = () => {\n\tconst context = useContext(SessionContext);\n\tif (context === undefined) {\n\t\tthrow new Error(`useSession must be used within a SessionContextProvider.`);\n\t}\n\n\treturn context.session;\n};\n\nexport const useUser = () => {\n\tconst context = useContext(SessionContext);\n\tif (context === undefined) {\n\t\tthrow new Error(`useUser must be used within a SessionContextProvider.`);\n\t}\n\n\treturn context.session?.user ?? null;\n};\n"]},"metadata":{},"sourceType":"script"}